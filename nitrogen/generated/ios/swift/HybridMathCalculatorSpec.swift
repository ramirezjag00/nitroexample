///
/// HybridMathCalculatorSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridMathCalculatorSpec``
public protocol HybridMathCalculatorSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func add(a: Double, b: Double) throws -> Double
  func subtract(a: Double, b: Double) throws -> Double
  func multiply(a: Double, b: Double) throws -> Double
  func divide(a: Double, b: Double) throws -> Double
}

/// See ``HybridMathCalculatorSpec``
public class HybridMathCalculatorSpec_base {
  private weak var cxxWrapper: HybridMathCalculatorSpec_cxx? = nil
  public func getCxxWrapper() -> HybridMathCalculatorSpec_cxx {
  #if DEBUG
    guard self is HybridMathCalculatorSpec else {
      fatalError("`self` is not a `HybridMathCalculatorSpec`! Did you accidentally inherit from `HybridMathCalculatorSpec_base` instead of `HybridMathCalculatorSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridMathCalculatorSpec_cxx(self as! HybridMathCalculatorSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the MathCalculator HybridObject.
 * Implement this protocol to create Swift-based instances of MathCalculator.
 * ```swift
 * class HybridMathCalculator : HybridMathCalculatorSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridMathCalculatorSpec = HybridMathCalculatorSpec_protocol & HybridMathCalculatorSpec_base
